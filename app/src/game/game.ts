import needle from 'needle';
import {config} from 'dotenv';
import vk from '../vk/vk';
import dbClient from '../db';
import admin from './admin';
import {getPluralForm} from '../util';
import {VkMessage} from '../vk/model/VkMessage';
import {AddWordResult} from './model/AddWordResult';

config();

const STEP_INTERVAL = process.env.GAME_STEP_INTERVAL ? parseInt(process.env.GAME_STEP_INTERVAL) : 15000;

let message: VkMessage;
let answer = '';
let isPlaying = false;
let gameId = '';
let timeoutObj: NodeJS.Timeout;
let taskImgBuffer: Buffer | null;
let hintImgBuffer: Buffer | null;
let lettersHintSent = false;

async function getRandomTask(): Promise<string> {
  const query = `
    SELECT name FROM friends_vk_bot.words WHERE approved = true
    ORDER BY RANDOM() LIMIT 1;
  `;

  const dbResult = await dbClient.query<any>(query);
  return dbResult.rows[0].name;
}

async function handleMessage(_message: VkMessage): Promise<boolean> {
  message = _message;
  if (!message.text) {
    return false;
  }
  if (isAddWordRequest(message.text)) {
    await handleAddWordRequest(message.text);
    return true;
  }
  if (isDeleteWordRequest(message.text)) {
    await handleDeleteWordRequest(message.text);
    return true;
  }
  if (isPlaying) {
    return await handlePlayingState();
  }
  if (isGameRequestMessage(message.text)) {
    await handleGameRequestMessage();
    return true;
  }
  return false;
}

function isAddWordRequest(text: string): boolean {
  const botMentioned = isBotMentioned(text);
  const containsAddWordRequest = text.includes('–∑–∞–ø–æ–º–Ω–∏ —Å–ª–æ–≤–æ');
  return botMentioned && containsAddWordRequest;
}

async function handleAddWordRequest(text: string): Promise<void> {
  const word = extractWord(text);

  if (word) {
    const result = await admin.addWord(word, true);
    if (result === AddWordResult.DUPLICATE_WORD) {
      await vk.sendMessage(`–Ø —É–∂–µ –∑–Ω–∞—é —Å–ª–æ–≤–æ "${ word }"! üòä`, 3000);
    } else if (result === AddWordResult.SUCCESS) {
      await vk.sendMessage(`üëç –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Å–ª–æ–≤–æ "${ word }"!`, 3000);
    }
  } else {
    const userName = await vk.getUserName(message.from_id);
    await vk.sendMessage(`${userName}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòí`, 3000);
  }
}

function isDeleteWordRequest(text: string): boolean {
  const botMentioned = isBotMentioned(text);
  const containsDeleteWordRequest = text.includes('–∑–∞–±—É–¥—å —Å–ª–æ–≤–æ');
  return botMentioned && containsDeleteWordRequest;
}

async function handleDeleteWordRequest(text: string): Promise<void> {
  const word = extractWord(text);

  if (word) {
    await admin.deleteWord(word);
    await vk.sendMessage(`üëç –Ø –∑–∞–±—ã–ª —Å–ª–æ–≤–æ "${ word }"!`, 3000);
  } else {
    const userName = await vk.getUserName(message.from_id);
    await vk.sendMessage(`${userName}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòí`, 3000);
  }
}

function extractWord(text: string): string | null {
  const parts = text.split(' ');
  const word = parts[parts.length - 1].replace(/[.,/#!$%^&*;:{}=\-_`~()a-zA-Z\d]/g, '');
  return word === '' ? null : word;
}

async function handleGameRequestMessage(): Promise<void> {

  if (isPlaying) {
    console.log('Game is already running, cannot start new game');
    return;
  }

  isPlaying = true;
  gameId = Date.now().toString();
  answer = await getRandomTask();
  console.log(`Correct answer: ${answer}`);
  try {
    await generatePhotos(answer);
    const welcomeMessages = [
      '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ! üòè –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è –∑–∞–≥–∞–¥–∞–ª?',
      '–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å! üòä –Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É. –°–º–æ–∂–µ—Ç–µ —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?',
    ];
    await vk.sendMessage(welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)], 3000);
    await vk.sendPhotoToChat(taskImgBuffer!);
    if (Math.random() > 0.5) {
      await vk.sendMessage(getLettersHintMessage());
      lettersHintSent = true;
    }
    timeoutObj = setTimeout(async () => await giveHint(gameId), STEP_INTERVAL);
  } catch (error) {
    resetGame();

    if (error instanceof Error && error.message === 'usageLimits') {
      const limitsMessages = [
        '–ß—Ç–æ-—Ç–æ —è —É—Å—Ç–∞–ª –∏–≥—Ä–∞—Ç—å... üò´ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä',
        '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞? –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç—Å—è üò≥',
        '–Ø —É–∂–µ –Ω–∞–∏–≥—Ä–∞–ª—Å—è, –º–Ω–µ –Ω–∞–¥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
      ];

      const limitsStickers = [13, 85, 2091, 5135, 5629];

      await vk.sendSticker(limitsStickers[Math.floor(Math.random() * limitsStickers.length)]);
      await vk.sendMessage(limitsMessages[Math.floor(Math.random() * limitsMessages.length)], 5000);
    } else {
      console.log(error);
    }
  }
}

async function generatePhotos(answer: string): Promise<void> {
  const apiURL = 'https://www.googleapis.com/customsearch/v1';
  const key = process.env.GOOGLE_KEY;
  const cx = process.env.GOOGLE_SEARCH_ENGINE_ID;
  const start = randomInteger(1, 5);

  const url = `${apiURL}?q=${encodeURIComponent(answer)}&cx=${cx}&fileType=jpg&num=2&safe=active&searchType=image&fields=items%2Flink&start=${start}&key=${key}`;
  const googleResponse = await needle('get', url);
  console.log(googleResponse.body);
  if (googleResponse.body.error?.errors[0].domain === 'usageLimits') {
    throw new Error('usageLimits');
  }
  const taskImgURL = googleResponse.body.items[0].link;
  const hintImgURL = googleResponse.body.items[1].link;
  const redirectOptions = { follow_max: 2 };
  const taskImgResponse = await needle('get', taskImgURL, null, redirectOptions);
  const hintImgResponse = await needle('get', hintImgURL, null, redirectOptions);
  console.log('Task and hint images are downloaded');
  taskImgBuffer = taskImgResponse.body;
  hintImgBuffer = hintImgResponse.body;
}

function randomInteger(min: number, max: number): number {
  return Math.floor(min + Math.random() * (max + 1 - min));
}

function getLettersHintMessage(): string {
  const lettersAmountInfo = `${answer.length} ${getPluralForm(answer.length, '–±—É–∫–≤–∞', '–±—É–∫–≤—ã', '–±—É–∫–≤')}`;
  return `–í –º–æ—ë–º —Å–ª–æ–≤–µ ${lettersAmountInfo}, –ø–µ—Ä–≤–∞—è ‚Äî ${answer[0].toUpperCase()}`;
}

async function giveHint(previousGameId: string): Promise<void> {
  console.log('Giving hint...');
  const hintMessages = [
    '–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç? üòí –í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞!',
    '–Ø –Ω–µ –¥—É–º–∞–ª, —á—Ç–æ –±—É–¥–µ—Ç —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ... üò• –î–µ—Ä–∂–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É',
  ];

  await vk.sendMessage(hintMessages[Math.floor(Math.random() * hintMessages.length)]);
  await vk.sendPhotoToChat(hintImgBuffer!);
  if (!lettersHintSent) {
    await vk.sendMessage(getLettersHintMessage());
  }

  if (previousGameId === gameId) {
    timeoutObj = setTimeout(async () => {
      await handleGameLoss(previousGameId);
    }, STEP_INTERVAL);
  } else {
    console.log('Previous game is over, no need to handle game loss');
  }
}

async function handleGameLoss(previousGameId: string): Promise<void> {
  console.log('Handling game loss...');
  if (previousGameId !== gameId) {
    return;
  }
  const answerMessages = [
    `–ù–µ —Ä–∞–∑–≥–∞–¥–∞–ª–∏? –≠—Ç–æ –∂–µ ${answer}!`,
    `‚è± –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî ${answer}`,
  ];

  resetGame();

  await vk.sendMessage(answerMessages[Math.floor(Math.random() * answerMessages.length)]);
}

function resetGame():void {
  isPlaying = false;
  answer = '';
  gameId = '';
  taskImgBuffer = null;
  hintImgBuffer = null;
  lettersHintSent = false;
}

async function handleCorrectAnswer(): Promise<void> {
  clearTimeout(timeoutObj);
  const previousAnswer = answer;
  resetGame();
  const name = await vk.getUserName(message.from_id);
  const successMessages = [
    `–ë—Ä–∞–≤–æ, ${name}! –ú–æ—ë —Å–ª–æ–≤–æ ‚Äî ${previousAnswer} üëè`,
    `${name}, —Ç—ã —É–º–Ω–∏—Ü–∞! üòÉ –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ ${previousAnswer}`,
    `–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ${name}! üëç –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ${previousAnswer}`,
    `–ò –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç ${name}, —Ä–∞–∑–≥–∞–¥–∞–≤ —Å–ª–æ–≤–æ "${previousAnswer}"! üòé`,
    `–Ø —É–≤–∏–¥–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî ${previousAnswer}! ${name}, –∫–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞—ë—Ç—Å—è? üôÄ`,
  ];
  const successMessage = successMessages[Math.floor(Math.random() * successMessages.length)];
  await vk.sendMessage(successMessage);
}

async function handlePlayingState(): Promise<boolean> {
  const text = message.text.toLowerCase();

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É,
  // –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞
  if (isGameRequestMessage(text)) {
    console.log('Game is already running, stop passing further');
    return true;
  }

  if (text === answer.toLowerCase()) {
    await handleCorrectAnswer();
    return true;
  } else {
    const word = extractWord(text);
    const botMentioned = isBotMentioned(text);
    if (word && !botMentioned) {
      await admin.addWord(word, false);
    }
    return !!word && !botMentioned;
  }
}

function isBotMentioned(text: string): boolean {
  return text.toLowerCase().startsWith('–±–æ—Ç,') || text.includes(`club${process.env.VK_GROUP_ID}`);
}

function isGameRequestMessage(text: string): boolean {
  const _text = text.toLowerCase();
  const botMentioned = isBotMentioned(_text);
  const gameRequested =
    _text.includes(' –∏–≥—Ä') ||
    _text.includes('–ø–æ–∏–≥—Ä–∞') ||
    _text.includes('—Å—ã–≥—Ä–∞');
  return botMentioned && gameRequested;
}

export default handleMessage;
