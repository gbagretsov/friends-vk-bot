import vk from '../vk/vk';
import weather from './weather';
import holidays from './holidays';
import {getStatistics, resetStatistics} from '../statistics/statistics';
import util from 'util';
import db from '../db';
import {
  getConcatenatedItems,
  getMonthNameInInstrumentalCase,
  getMonthNameInNominativeCase, getMonthNameInPrepositionalCase,
  getPluralForm
} from '../util';
import {config} from 'dotenv';
import {Weather} from './model/Weather';
import {WeatherForecast} from './model/WeatherForecast';
import {VkUser} from '../vk/model/VkUser';
import {Statistics} from '../statistics/model/Statistics';

config();

function getWeatherMessage(weather: Weather | null, forecast: WeatherForecast | null): string {
  if (!weather || !forecast) {
    return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! \n –Ø –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üòû';
  }
  const hoursOffset = parseInt(process.env.TIME_ZONE_HOURS_OFFSET);
  const concatenatedWeatherForecast = forecast.reduce((sum, cur) => {
    const date = new Date(cur.dt * 1000);
    return `${sum}
            - –≤ ${(date.getUTCHours() + hoursOffset) % 24}:00 ${getWeatherLine(cur)}`;
  }, '');
  return `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!
    –°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ ${getWeatherLine(weather)} \n
    –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${concatenatedWeatherForecast}`;
}

function getWeatherLine(weatherObject: Weather): string {
  return `${ weatherObject.weather[0].description }, ${ Math.round(weatherObject.main.temp)}¬∞C, –≤–µ—Ç–µ—Ä ${ Math.round(weatherObject.wind.speed)} –º/—Å`;
}

async function getHolidaysMessage(holidays: string[] | null): Promise<string> {
  if (!holidays) {
    return '–Ø –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ üòû –ú–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ calend.ru –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
  } else if (holidays.length) {
    const concatenatedHolidays = getConcatenatedItems(holidays);

    const phrases = [
      `üéâ A –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è ${concatenatedHolidays}? –ü–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: calend.ru`,
      `üéâ –°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–µ—Ç—Å—è ${concatenatedHolidays}! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ calend.ru`,
      `üéâ –ì–æ—Ç–æ–≤ –ø–æ—Å–ø–æ—Ä–∏—Ç—å, –≤—ã –Ω–µ –º–æ–≥–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç ${concatenatedHolidays}. –≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª! –ü–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: calend.ru`,
      `üéâ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç, –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å ${concatenatedHolidays}. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ —Å—é–¥–∞: calend.ru`,
    ];

    return phrases[Math.floor(Math.random() * phrases.length)];
  } else {
    const response = await db.query<{key: string, value: string}>
    ('SELECT value FROM friends_vk_bot.state WHERE key = \'absent_holidays_phrases\';');
    const absentHolidaysPhrases = response.rows[0].value.split('\n');
    return absentHolidaysPhrases[Math.floor(Math.random() * absentHolidaysPhrases.length)];
  }
}

async function getAdsMessage(): Promise<string> {
  const response = await db.query<{key: string, value: string}>
  ('SELECT value FROM friends_vk_bot.state WHERE key = \'ads\';');
  return response.rows[0].value;
}

async function getStatisticsMessage(statisticsObject: Statistics): Promise<string> {
  const previousMonthIndex = new Date().getMonth() - 1;

  const totalAmountMessage = getTotalAmountMessage(statisticsObject.totalAmount);
  const audioMessagesAmountMessage = getAudioMessagesAmountMessage(statisticsObject.audioMessagesAmount);
  const stickersAmountMessage = getStickersAmountMessage(statisticsObject.stickersAmount);
  const repostsAmountMessage = getRepostsAmountMessage(statisticsObject.repostsAmount);

  const mostActiveUserNamesMessage =
    statisticsObject.mostActiveUsers.length > 0 ?
      getMostActiveUserNamesMessage(statisticsObject.mostActiveUsers, previousMonthIndex) :
      null;

  const comparisonMessage = statisticsObject.previousMonthAmount !== null ? getComparisonMessage(statisticsObject.previousMonthAmount, statisticsObject.totalAmount) : null;

  let resultMessage = `‚ö† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ ${getMonthNameInNominativeCase(previousMonthIndex)} ‚ö†

    –í ${getMonthNameInPrepositionalCase(previousMonthIndex)} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalAmountMessage}, –∏–∑ –Ω–∏—Ö:
    ‚Äî ${audioMessagesAmountMessage}
    ‚Äî ${stickersAmountMessage}
    ‚Äî ${repostsAmountMessage}\n\n`;
  if (comparisonMessage) {
    resultMessage += `–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å ${getMonthNameInInstrumentalCase(previousMonthIndex - 1)}, \
      –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π ${comparisonMessage}.\n\n`;
  }
  if (mostActiveUserNamesMessage) {
    resultMessage += mostActiveUserNamesMessage;
  }
  return resultMessage;
}

function statisticsShouldBeShown(): boolean {
  return process.env.DEBUG_STATISTICS === '1' || new Date().getDate() === 1;
}

function statisticsShouldBeReset(): boolean {
  return process.env.DEBUG_STATISTICS !== '1' && new Date().getDate() === 1;
}

function getTotalAmountMessage(totalAmount: number): string {
  return `${totalAmount} ${getPluralForm(totalAmount, '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏–π')}`;
}

function getAudioMessagesAmountMessage(audioMessagesAmount: number): string {
  return `${audioMessagesAmount} ${getPluralForm(audioMessagesAmount, '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è', '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')}`;
}

function getStickersAmountMessage(stickersAmount: number): string {
  return `${stickersAmount} ${getPluralForm(stickersAmount, '—Å—Ç–∏–∫–µ—Ä', '—Å—Ç–∏–∫–µ—Ä–∞', '—Å—Ç–∏–∫–µ—Ä–æ–≤')}`;
}

function getRepostsAmountMessage(repostsAmount: number): string {
  return `${repostsAmount} ${getPluralForm(repostsAmount, '—Ä–µ–ø–æ—Å—Ç', '—Ä–µ–ø–æ—Å—Ç–∞', '—Ä–µ–ø–æ—Å—Ç–æ–≤')}`;
}

function getMostActiveUserNamesMessage(mostActiveUsers: VkUser[], previousMonthIndex: number): string {
  const mostActiveUsersNames = getMostActiveUsersNames(mostActiveUsers);
  const concatenatedMostActiveUsersNames = getConcatenatedItems(mostActiveUsersNames);

  return `${mostActiveUsers.length > 1 ? '–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏' : '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'} –±–µ—Å–µ–¥—ã \
    –≤ ${getMonthNameInPrepositionalCase(previousMonthIndex)} ‚Äî ${concatenatedMostActiveUsersNames}.`;
}

function getMostActiveUsersNames(mostActiveUsers: VkUser[]): string[] {
  return mostActiveUsers.map(user => user.first_name);
}

function getComparisonMessage(monthBeforePreviousAmount: number, previousMonthAmount: number): string {
  if (previousMonthAmount === monthBeforePreviousAmount) {
    return '–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å';
  }

  if (monthBeforePreviousAmount === 0) {
    return '—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ ‚àû%';
  }

  const percentageDelta = Math.round((previousMonthAmount - monthBeforePreviousAmount) / monthBeforePreviousAmount * 100);

  if (percentageDelta > 0) {
    return `—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ ${percentageDelta}%`;
  }
  if (percentageDelta < 0) {
    return `—É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ ${-percentageDelta}%`;
  }

  if (previousMonthAmount > monthBeforePreviousAmount) {
    return '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å';
  } else {
    return '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å';
  }
}

export default async () => {

  const stickersIDs = [
    16, 21, 28, 29, 30, 50, 52, 2079, 2770, 2778, 2780, 3003, 4323, 4343, 4346, 4535,
  ];

  const [ currentWeather, forecast, todayHolidays ] = await Promise.all([
    weather.getCurrentWeather(),
    weather.getForecast(),
    holidays.getHolidays(),
  ]);

  console.log(`Weather: ${ util.inspect(currentWeather) }`);
  console.log(`Forecast: ${ util.inspect(forecast) }`);
  const weatherMessage = getWeatherMessage(currentWeather, forecast);

  const randomID = stickersIDs[Math.floor(Math.random() * stickersIDs.length)];
  console.log(`Sticker sent response: ${ await vk.sendSticker(randomID) }`);

  console.log(`Weather message: ${ weatherMessage }`);
  console.log(`Weather message sent response: ${ await vk.sendMessage(weatherMessage) }`);

  const holidaysMessage = await getHolidaysMessage(todayHolidays);
  console.log(`Holidays: ${ util.inspect(todayHolidays) }`);
  if (holidaysMessage) {
    console.log(`Holidays message sent response: ${ await vk.sendMessage(holidaysMessage) }`);
  }

  const ads = await getAdsMessage();
  console.log(`Ads: ${ ads }`);
  if (ads) {
    console.log(`Ads message sent response: ${ await vk.sendMessage(ads) }`);
  }

  const albumId = process.env.VK_LEADERBOARD_ALBUM_ID;
  if (statisticsShouldBeShown()) {
    const statisticsObject = await getStatistics();
    if (statisticsObject) {
      const statisticsMessage = await getStatisticsMessage(statisticsObject);
      console.log(`Statistics: ${statisticsMessage}`);
      console.log(`Statistics message sent response: ${await vk.sendMessage(statisticsMessage)}`);
      const leaderboardPhotos = statisticsObject.leaderboardPhotos;
      for (const photoBuffer of leaderboardPhotos) {
        await vk.sendPhotoToChat(photoBuffer);
        if (albumId) {
          await vk.addPhotoToAlbum(photoBuffer, albumId);
        }
      }
    }
  }
  if (statisticsShouldBeReset()) {
    await resetStatistics();
  }

};
