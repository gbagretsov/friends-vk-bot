const needle = require('needle');
const fs = require('fs');
require('dotenv').config();

const vk = require('../vk');
const dbClient = require('../db');
const admin = require('./admin');

const TABLE_WORDS = 'words';

const STATE_IDLE = 'idle';
const STATE_PLAYING = 'playing';

const STEP_INTERVAL = process.env.GAME_STEP_INTERVAL || 15000;

let answer;
let timeoutObj;

async function getRandomTask() {
  // TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  let query = `
    SELECT name FROM friends_vk_bot.${TABLE_WORDS} WHERE approved = true
    ORDER BY RANDOM() LIMIT 1;
  `;

  let client = dbClient();

  const dbResult = await client.query(query);
  await client.end();
  return {
    answer: dbResult.rows[0].name,
  };
}

async function setGameState(state) {
  let query = `
    BEGIN TRANSACTION;
    UPDATE friends_vk_bot.state SET value = '${ state.state }' WHERE key = 'state';
    UPDATE friends_vk_bot.state SET value = '${ state.answer }' WHERE key = 'answer';
    COMMIT TRANSACTION;
  `;
  let client = dbClient();
  await client.query(query);
  await client.end();
}

async function getGameState() {
  let state = {};
  let client = dbClient();
  const dbResult = await client.query('SELECT * FROM friends_vk_bot.state;');
  await client.end();
  for (let row of dbResult.rows) {
    state[row['key']] = row['value'];
  }
  return state;
}

async function handleMessage(resolve, reject) {
  const state = await getGameState();
  if (await handleAddWordRequest() || await handleDeleteWordRequest()) {
    resolve(true);
  } else if (state.state === STATE_IDLE) {
    await handleIdleState(resolve, reject);
  } else if (state.state === STATE_PLAYING) {
    answer = state.answer;
    await handlePlayingState(resolve, reject);
  }
}

async function handleAddWordRequest() {
  let text = this.message.text.toLowerCase();
  let botMentioned = isBotMentioned(text);
  let isAddWordRequest = text.includes('–∑–∞–ø–æ–º–Ω–∏ —Å–ª–æ–≤–æ');

  if (botMentioned && isAddWordRequest) {
    let word = extractWord(text);

    if (word) {
      const result = await admin.addWord(word);
      if (result === '23505') {
        vk.sendMessage(`–Ø —É–∂–µ –∑–Ω–∞—é —Å–ª–æ–≤–æ "${ word }"! üòä`, 3000);
      } else {
        vk.sendMessage(`üëç –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Å–ª–æ–≤–æ "${ word }"!`, 3000);
      }
    } else {
      vk.getUserName(this.message.from_id)
        .then(name => vk.sendMessage(`${name}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòí`, 3000));
    }
    return true;
  }

  return false;
}

async function handleDeleteWordRequest() {
  let text = this.message.text.toLowerCase();
  let botMentioned = isBotMentioned(text);
  let isDeleteWordRequest = text.includes('–∑–∞–±—É–¥—å —Å–ª–æ–≤–æ');

  if (botMentioned && isDeleteWordRequest) {
    let word = extractWord(text);
    
    if (word) {
      await admin.deleteWord(word);
      vk.sendMessage(`üëç –Ø –∑–∞–±—ã–ª —Å–ª–æ–≤–æ "${ word }"!`, 3000);
    } else {
      vk.getUserName(this.message.from_id)
        .then(name => vk.sendMessage(`${name}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòí`, 3000));
    }
    return true;
  }

  return false;
}

function extractWord(text) {
  let parts = text.split(' ');
  let word = parts[parts.length - 1];

  word = word.replace(/[.,/#!$%^&*;:{}=\-_`~()a-zA-Z\d]/g, '');

  return word === '' ? false : word;
}

async function handleIdleState(resolve) {
  let text = this.message.text.toLowerCase();

  if (isGameRequestMessage(text)) {
    resolve(true);
    const task = await getRandomTask();
    answer = task.answer;
    try {
      await generatePhotos();
      console.log(answer);
      await setGameState({state: STATE_PLAYING, answer: answer});
      // TODO: –±–æ–ª—å—à–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      let welcomeMessages = [
        '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ! üòè –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è –∑–∞–≥–∞–¥–∞–ª?',
        '–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å! üòä –Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É. –°–º–æ–∂–µ—Ç–µ —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?',
      ];
      await vk.sendMessage(welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)], 3000);
      let photoPath = __dirname + '/task.jpg';
      await vk.sendPhoto(photoPath);
      timeoutObj = setTimeout(giveHint, STEP_INTERVAL);
    } catch (error) {
      // –ë–æ—Ç —É—Å—Ç–∞–ª
      if (error.message === 'usageLimits') {
        // TODO: –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        let limitsMessages = [
          '–ß—Ç–æ-—Ç–æ —è —É—Å—Ç–∞–ª –∏–≥—Ä–∞—Ç—å... üò´ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä',
          '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞? –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç—Å—è üò≥',
          '–Ø —É–∂–µ –Ω–∞–∏–≥—Ä–∞–ª—Å—è, –º–Ω–µ –Ω–∞–¥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
        ];

        let limitsStickers = [13, 85, 2091, 5135, 5629];

        await vk.sendSticker(limitsStickers[Math.floor(Math.random() * limitsStickers.length)]);
        await vk.sendMessage(limitsMessages[Math.floor(Math.random() * limitsMessages.length)], 5000);
      }
    }
  } else {
    resolve(false);
  }
}

async function generatePhotos() {
  let apiURL = 'https://www.googleapis.com/customsearch/v1';
  let key = process.env.GOOGLE_KEY;
  let cx = process.env.GOOGLE_SEARCH_ENGINE_ID;
  let start = randomInteger(1, 5);

  let url = `${apiURL}?q=${encodeURIComponent(answer)}&cx=${cx}&fileType=jpg&num=2&safe=active&searchType=image&fields=items%2Flink&start=${start}&key=${key}`;
  const googleResponse = await needle('get', url);
  console.log(googleResponse.body);
  if (googleResponse.body.error && googleResponse.body.error.errors[0].domain === 'usageLimits') {
    throw new Error('usageLimits');
  }
  const taskImgURL = googleResponse.body.items[0].link;
  const hintImgURL = googleResponse.body.items[1].link;
  const taskImgResponse = await needle('get', taskImgURL);
  const hintImgResponse = await needle('get', hintImgURL);
  fs.writeFileSync(__dirname + '/task.jpg', taskImgResponse.body);
  fs.writeFileSync(__dirname + '/hint.jpg', hintImgResponse.body);
}

function randomInteger(min, max) {
  let rand = min + Math.random() * (max + 1 - min);
  rand = Math.floor(rand);
  return rand;
}

async function giveHint() {

  // TODO: –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
  let hintMessages = [
    '–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç? üòí –í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞!',
    '–Ø –Ω–µ –¥—É–º–∞–ª, —á—Ç–æ –±—É–¥–µ—Ç —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ... üò• –î–µ—Ä–∂–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É',
  ];

  const photoPath = __dirname + '/hint.jpg';

  await vk.sendMessage(hintMessages[Math.floor(Math.random() * hintMessages.length)]);
  await vk.sendPhoto(photoPath);

  timeoutObj = setTimeout(sendAnswer, STEP_INTERVAL);
}

async function sendAnswer() {
  await setGameState({state: STATE_IDLE, answer: ''});

  // TODO: –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–≤–µ—Ç–æ–≤
  let answerMessages = [
    `–ù–µ —Ä–∞–∑–≥–∞–¥–∞–ª–∏? –≠—Ç–æ –∂–µ ${answer}!`,
    `‚è± –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî ${answer}`,
  ];

  vk.sendMessage(answerMessages[Math.floor(Math.random() * answerMessages.length)]);
}

async function handlePlayingState(resolve) {
  let text = this.message.text.toLowerCase();

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É,
  // –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞
  if(isGameRequestMessage(text)) {
    console.log('game is already running');
    resolve(true);
    return;
  }

  let answerIsCorrect = checkAnswer(text);

  if (answerIsCorrect) {
    clearTimeout(timeoutObj);
    resolve(true);
    await setGameState({state: STATE_IDLE, answer: ''});
    const name = await vk.getUserName(this.message.from_id);
    let successMessages = [
      `–ë—Ä–∞–≤–æ, ${name}! –ú–æ—ë —Å–ª–æ–≤–æ ‚Äî ${answer} üëè`,
      `${name}, —Ç—ã —É–º–Ω–∏—Ü–∞! üòÉ –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ ${answer}`,
      `–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ${name}! üëç –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ${answer}`,
      `–ò –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç ${name}, —Ä–∞–∑–≥–∞–¥–∞–≤ —Å–ª–æ–≤–æ "${answer}"! üòé`,
      `–Ø —É–≤–∏–¥–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî ${answer}! ${name}, –∫–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞—ë—Ç—Å—è? üôÄ`,
    ];
    let successMessage = successMessages[Math.floor(Math.random() * successMessages.length)];
    vk.sendMessage(successMessage);
    // TODO: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä
  } else {
    let word = extractWord(text);
    let botMentioned = isBotMentioned(text);
    resolve(word && !botMentioned);
    if (word && !botMentioned) {
      await admin.addWord(word, false);
    }
  }
}

function isBotMentioned(text) {
  return text.startsWith('–±–æ—Ç,') || text.includes('club171869330');
}

function isGameRequestMessage(text) {
  text = text.toLowerCase();
  let botMentioned = isBotMentioned(text);
  let gameRequested = 
    text.includes(' –∏–≥—Ä') ||
    text.includes('–ø–æ–∏–≥—Ä–∞') || 
    text.includes('—Å—ã–≥—Ä–∞');
  return botMentioned && gameRequested;
}

function checkAnswer(entered) {
  // TODO: –±–æ–ª–µ–µ —â–∞–¥—è—â–∞—è –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  return entered === answer.toLowerCase();
}

module.exports = function(message) {
  this.message = message;
  return new Promise(handleMessage);
};
