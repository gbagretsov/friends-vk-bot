const vk = require('../vk');
const dbClient = require('../db');

const TABLE_STATE = 'state';
const TABLE_ACTORS = 'actors';

const STATE_IDLE = 'idle';
const STATE_PLAYING = 'playing';

const STEP_INTERVAL = 15000;

let message, answer;
let timeoutObj;

function getRandomTask() {
  // TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  let tableName = TABLE_ACTORS;
  let category = '–∞–∫—Ç—ë—Ä –∏–ª–∏ –∞–∫—Ç—Ä–∏—Å–∞';

  let query = `
    SELECT name FROM friends_vk_bot.${tableName}
    ORDER BY RANDOM() LIMIT 1;
  `;

  return dbClient().query(query)
    .then(result => {
      return {
        category: category,
        answer: result.rows[0].name,
      };
    });
}

function setGameState(state) {
  let query = `
    BEGIN TRANSACTION;
    UPDATE friends_vk_bot.state SET value = '${ state.state }' WHERE key = 'state';
    UPDATE friends_vk_bot.state SET value = '${ state.answer }' WHERE key = 'answer';
    COMMIT TRANSACTION;
  `;
  return dbClient().query(query);
}

function getGameState() {
  return dbClient().query('SELECT * FROM friends_vk_bot.state;')
    .then(result => {
      state = {};
      for (let row of result.rows) {
        state[row['key']] = row['value'];
      }
      return state;
    });
}

function handleMessage(resolve, reject) {
  getGameState()
    .then(state => {
      if (state.state === STATE_IDLE) {
        handleIdleState(resolve, reject);
      } else if (state.state === STATE_PLAYING) {
        answer = state.answer;
        handlePlayingState(resolve, reject);
      }
    });
}

function handleIdleState(resolve, reject) {
  let text = this.message.text.toLowerCase();
  let photoPath;

  if (isGameRequestMessage(text)) {
    getRandomTask()
      .then(task => {
        answer = task.answer;
        console.log(answer);
        setGameState({state: STATE_PLAYING, answer: task.answer});
        timeoutObj = setTimeout(giveHint, STEP_INTERVAL);
        resolve(true);
        
        // TODO: –±–æ–ª—å—à–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        let welcomeMessages = [
          `–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ! üòè –ß—Ç–æ —ç—Ç–æ –∑–∞ ${task.category}?`,
          `–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å! üòä –ü–µ—Ä–µ–¥ –≤–∞–º–∏ ${task.category}, —Å–º–æ–∂–µ—Ç–µ —É–≥–∞–¥–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?`,
          `–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ ${task.category}. –ù–∞–∑–æ–≤—ë—Ç–µ –∏–º—è ‚Äî –ø–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏! ‚ò∫`,
        ];

        // TODO: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é API Google
        photoPath = __dirname + '/task.jpg';

        // TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        return vk.sendMessage(welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)]);
      })
      .then(response => {
        return vk.sendPhoto(photoPath);
      });
  } else {
    resolve(false);
  }
}

function giveHint() {
  timeoutObj = setTimeout(sendAnswer, STEP_INTERVAL);
  
  // TODO: –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
  let hintMessages = [
    '–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç? üòí –í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞!',
    '–Ø –Ω–µ –¥—É–º–∞–ª, —á—Ç–æ –±—É–¥–µ—Ç —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ... üò• –î–µ—Ä–∂–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É',
  ];

  photoPath = __dirname + '/hint.jpg';

  vk.sendMessage(hintMessages[Math.floor(Math.random() * hintMessages.length)])
  .then(response => {
    return vk.sendPhoto(photoPath);
  });
}

function sendAnswer() {
  setGameState({state: STATE_IDLE, answer: ''});

  // TODO: –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–≤–µ—Ç–æ–≤
  let answerMessages = [
    `–ù–µ —É–∑–Ω–∞–ª–∏? –≠—Ç–æ –∂–µ ${answer}!`,
    `‚è± –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî ${answer}`,
  ];

  photoPath = __dirname + '/full.jpg';

  vk.sendMessage(answerMessages[Math.floor(Math.random() * answerMessages.length)])
  .then(response => {
    return vk.sendPhoto(photoPath);
  });
}

function handlePlayingState(resolve, reject) {
  let text = this.message.text.toLowerCase();

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É,
  // –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞
  if(isGameRequestMessage(text)) {
    console.log('game is already running');
    resolve(true);
    return;
  }

  let answerIsCorrect = checkAnswer(text);

  if (answerIsCorrect) {
    clearTimeout(timeoutObj);
    setGameState({state: STATE_IDLE, answer: ''});
    vk.getUserName(this.message.from_id)
      .then(function (name) {
        let successMessages = [
          `–ë—Ä–∞–≤–æ, ${name}! üëè`,
          `${name}, —Ç—ã —É–º–Ω–∏—Ü–∞! üòÉ`,
          `–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ${name}! üëç –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ${answer}`,
          `–ò –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç ${name}! üòé`,
          `${name}, –∫–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞—ë—Ç—Å—è? üôÄ `,
        ];
        let successMessage = successMessages[Math.floor(Math.random() * successMessages.length)];
        return vk.sendMessage(successMessage);
      })
      .then(response => {
        let photoPath = __dirname + '/full.jpg';
        return vk.sendPhoto(photoPath);
      });
    // TODO: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä
  }
  resolve(answerIsCorrect);
}

function isGameRequestMessage(text) {
  text = text.toLowerCase();
  let botMentioned = text.startsWith('–±–æ—Ç,') || text.includes('club171869330');
  let gameRequested = 
    text.includes(' –∏–≥—Ä') ||
    text.includes('–ø–æ–∏–≥—Ä–∞') || 
    text.includes('—Å—ã–≥—Ä–∞');
  return botMentioned && gameRequested;
}

function checkAnswer(entered) {
  // TODO: –±–æ–ª–µ–µ —â–∞–¥—è—â–∞—è –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  return entered === answer.toLowerCase();
}

module.exports = function(message) {  
  this.message = message;
  return new Promise(handleMessage);
}