const sender = require('../vk');
const dbClient = require('../db');

const TABLE_STATE = 'state';
const TABLE_ACTORS = 'actors';

const STATE_IDLE = 'idle';
const STATE_PLAYING = 'playing';

let message;

function getRandomTask() {
  // TODO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  let tableName = TABLE_ACTORS;
  let category = '–∞–∫—Ç—ë—Ä –∏–ª–∏ –∞–∫—Ç—Ä–∏—Å–∞';

  let query = `
    SELECT name FROM friends_vk_bot.${tableName}
    WHERE 1 = 1;
  `;

  return dbClient().query(query)
    .then(result => {
      return {
        category: category,
        answer: result.rows[0].name.toLowerCase(),
      };
    });
}

function setGameState(state) {
  let query = `
    BEGIN TRANSACTION;
    UPDATE friends_vk_bot.state SET value = '${ state.state }' WHERE key = 'state';
    UPDATE friends_vk_bot.state SET value = '${ state.answer }' WHERE key = 'answer';
    COMMIT TRANSACTION;
  `;
  return dbClient().query(query);
}

function getGameState() {
  return dbClient().query('SELECT * FROM friends_vk_bot.state;')
    .then(result => {
      state = {};
      for (let row of result.rows) {
        state[row['key']] = row['value'];
      }
      return state;
    });
}

function handleMessage(resolve, reject) {
  getGameState()
    .then(state => {
      if (state.state === STATE_IDLE) {
        handleIdleState(resolve, reject);
      } else if (state.state === STATE_PLAYING) {
        handlePlayingState(resolve, reject, state);
      }
    });
}

function handleIdleState(resolve, reject) {
  let text = this.message.text.toLowerCase();

  if (isGameRequestMessage(text)) {
    getRandomTask()
      .then(task => {
        setGameState({state: STATE_PLAYING, answer: task.answer});
        
        // TODO: –±–æ–ª—å—à–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        let welcomeMessages = [
          `–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ! üòè –ß—Ç–æ —ç—Ç–æ –∑–∞ ${task.category}?`,
          `–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å! üòä –ü–µ—Ä–µ–¥ –≤–∞–º–∏ ${task.category}, —Å–º–æ–∂–µ—Ç–µ —É–≥–∞–¥–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?`,
          `–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ ${task.category}. –ù–∞–∑–æ–≤—ë—Ç–µ –∏–º—è ‚Äî –ø–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏! ‚ò∫`,
        ];
        sender.sendMessage(welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)]);
        
        // TODO: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
        
        resolve(true);
      });
  } else {
    resolve(false);
  }
}

// TODO: –ø–æ–¥—Å–∫–∞–∑–∫–∞, –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ n —Å–µ–∫—É–Ω–¥ 

function handlePlayingState(resolve, reject, state) {
  let text = this.message.text.toLowerCase();

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É,
  // –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–æ—Ç–∞
  if(isGameRequestMessage(text)) {
    console.log('game is already running');
    resolve(true);
  }

  let answer = state.answer;
  let answerIsCorrect = checkAnswer(text, answer);

  if (answerIsCorrect) {
    setGameState({state: STATE_IDLE, answer: ''});
    // TODO: –ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞
    sender.sendMessage(`–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!`);
    // TODO: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
  }
  resolve(answerIsCorrect);
}

function isGameRequestMessage(text) {
  text = text.toLowerCase();
  let botMentioned = text.startsWith('–±–æ—Ç,') || text.includes('club171869330');
  let gameRequested = 
    text.includes(' –∏–≥—Ä') ||
    text.includes('–ø–æ–∏–≥—Ä–∞') || 
    text.includes('—Å—ã–≥—Ä–∞');
  return botMentioned && gameRequested;
}

function checkAnswer(entered, answer) {
  // TODO: –±–æ–ª–µ–µ —â–∞–¥—è—â–∞—è –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  return entered === answer;
}

module.exports = function(message) {  
  this.message = message;
  return new Promise(handleMessage);
}