const sender = require('../vk');
const weather = require('./weather');
const holidays = require('./holidays');
const statistics = require('../statistics/statistics');
const util = require('util');
const db = require('../db');

function getWeatherMessage(weather, forecast) {
  return `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!
–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ ${ weather.weather[0].description }, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${ Math.round(weather.main.temp)}¬∞C, –≤–µ—Ç–µ—Ä ${ weather.wind.speed.toFixed(1)} –º/—Å
–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
- –¥–Ω—ë–º ${ forecast[1].weather[0].description }, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${ Math.round(forecast[1].main.temp) }¬∞C, –≤–µ—Ç–µ—Ä ${ forecast[1].wind.speed.toFixed(1) } –º/—Å
- –≤–µ—á–µ—Ä–æ–º ${ forecast[3].weather[0].description }, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${ Math.round(forecast[3].main.temp)}¬∞C, –≤–µ—Ç–µ—Ä ${ forecast[3].wind.speed.toFixed(1) } –º/—Å`;
}

function getHolidaysMessage(holidays) {
  if (holidays.length) {
    let concatenatedHolidays = holidays.reduce((sum, cur, i, arr) => {
      if (i === arr.length - 1) {
        return `${sum} –∏ ${cur}`;
      } else {
        return `${sum}, ${cur}`;
      }
    });

    let phrases = [
      `üéâ A –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è ${concatenatedHolidays}? –ü–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: calend.ru`,
      `üéâ –°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–µ—Ç—Å—è ${concatenatedHolidays}! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ calend.ru`,
      `üéâ –ì–æ—Ç–æ–≤ –ø–æ—Å–ø–æ—Ä–∏—Ç—å, –≤—ã –Ω–µ –º–æ–≥–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç ${concatenatedHolidays}. –≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª! –ü–æ–¥—Ä–æ–±–Ω–µ–µ –∑–¥–µ—Å—å: calend.ru`,
      `üéâ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç, –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å ${concatenatedHolidays}. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ —Å—é–¥–∞: calend.ru`,
    ];

    return phrases[Math.floor(Math.random() * phrases.length)];
  } else {
    return '';
  }
}

async function getAdsMessage() {
  const response = await db.query('SELECT value FROM friends_vk_bot.state WHERE key = \'ads\';');
  return response.rows[0].value;
}

async function getStatisticsMessage() {
  const statisticsObject = await statistics.getStatistics();
  const previousMonthIndex = new Date().getMonth() - 1;

  const totalAmountMessage = getTotalAmountMessage(statisticsObject.totalAmount);
  const audioMessagesAmountMessage = getAudioMessagesAmountMessage(statisticsObject.audioMessagesAmount);
  const stickersAmountMessage = getStickersAmountMessage(statisticsObject.stickersAmount);
  const repostsAmountMessage = getRepostsAmountMessage(statisticsObject.repostsAmount);

  const mostActiveUserNamesMessage = statisticsObject.mostActiveUsers.length > 0 ? await getMostActiveUserNamesMessage(statisticsObject.mostActiveUsers, previousMonthIndex) : null;

  const comparisonMessage = statisticsObject.previousMonthAmount !== null ? getComparisonMessage(statisticsObject.previousMonthAmount, statisticsObject.totalAmount) : null;

  let resultMessage = `‚ö† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ ${getMonthNameInNominativeCase(previousMonthIndex)} ‚ö†

–í ${getMonthNameInPrepositionalCase(previousMonthIndex)} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalAmountMessage}, –∏–∑ –Ω–∏—Ö:
‚Äî ${audioMessagesAmountMessage}
‚Äî ${stickersAmountMessage}
‚Äî ${repostsAmountMessage}
`;
  if (comparisonMessage) {
    resultMessage += `
–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å ${getMonthNameInInstrumentalCase(previousMonthIndex - 1)}, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π ${comparisonMessage}.
`;
  }
  if (mostActiveUserNamesMessage) {
    resultMessage += mostActiveUserNamesMessage;
  }
  return resultMessage;
}

function firstDayOfMonth() {
  return new Date().getDate() === 1;
}

function getTotalAmountMessage(totalAmount) {
  return getAmountWithPluralForm(totalAmount, '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏–π');
}

function getAudioMessagesAmountMessage(audioMessagesAmount) {
  return getAmountWithPluralForm(audioMessagesAmount, '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è', '–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
}

function getStickersAmountMessage(stickersAmount) {
  return getAmountWithPluralForm(stickersAmount, '—Å—Ç–∏–∫–µ—Ä', '—Å—Ç–∏–∫–µ—Ä–∞', '—Å—Ç–∏–∫–µ—Ä–æ–≤');
}

function getRepostsAmountMessage(repostsAmount) {
  return getAmountWithPluralForm(repostsAmount, '—Ä–µ–ø–æ—Å—Ç', '—Ä–µ–ø–æ—Å—Ç–∞', '—Ä–µ–ø–æ—Å—Ç–æ–≤');
}

function getAmountWithPluralForm(amount, oneForm, twoForm, fiveForm) {
  let n = amount % 100;
  if (n >= 5 && n <= 20) {
    return `${amount} ${fiveForm}`;
  }
  n %= 10;
  if (n === 1) {
    return `${amount} ${oneForm}`;
  }
  if (n >= 2 && n <= 4) {
    return `${amount} ${twoForm}`;
  }
  return `${amount} ${fiveForm}`;
}

async function getMostActiveUserNamesMessage(mostActiveUsersIds, previousMonthIndex) {
  const mostActiveUsersNames = await getMostActiveUsersNames(mostActiveUsersIds);

  const concatenatedMostActiveUsersNames = mostActiveUsersNames.reduce((sum, cur, i, arr) => {
    if (i === arr.length - 1) {
      return `${sum} –∏ ${cur}`;
    } else {
      return `${sum}, ${cur}`;
    }
  });

  return `
${mostActiveUsersIds.length > 1 ? '–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏' : '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'} –±–µ—Å–µ–¥—ã –≤ ${getMonthNameInPrepositionalCase(previousMonthIndex)} ‚Äî ${concatenatedMostActiveUsersNames}.
`;
}

async function getMostActiveUsersNames(mostActiveUsersIds) {
  return await Promise.all(mostActiveUsersIds.map(async uid => (await sender.getUserInfo(uid)).first_name));
}

function getComparisonMessage(monthBeforePreviousAmount, previousMonthAmount) {
  if (previousMonthAmount === monthBeforePreviousAmount) {
    return '–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å';
  }

  if (monthBeforePreviousAmount === 0) {
    return '—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ ‚àû%';
  }

  const percentageDelta = Math.round((previousMonthAmount - monthBeforePreviousAmount) / monthBeforePreviousAmount * 100);

  if (percentageDelta > 0) {
    return `—É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ ${percentageDelta}%`;
  }
  if (percentageDelta < 0) {
    return `—É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ ${-percentageDelta}%`;
  }

  if (previousMonthAmount > monthBeforePreviousAmount) {
    return '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å';
  } else {
    return '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å';
  }
}

function getMonthNameInNominativeCase(monthIndex) {
  const months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'];
  return months[(monthIndex + 12) % 12];
}

function getMonthNameInPrepositionalCase(monthIndex) {
  const months = ['—è–Ω–≤–∞—Ä–µ', '—Ñ–µ–≤—Ä–∞–ª–µ', '–º–∞—Ä—Ç–µ', '–∞–ø—Ä–µ–ª–µ', '–º–∞–µ', '–∏—é–Ω–µ', '–∏—é–ª–µ', '–∞–≤–≥—É—Å—Ç–µ', '—Å–µ–Ω—Ç—è–±—Ä–µ', '–æ–∫—Ç—è–±—Ä–µ', '–Ω–æ—è–±—Ä–µ', '–¥–µ–∫–∞–±—Ä–µ'];
  return months[(monthIndex + 12) % 12];
}

function getMonthNameInInstrumentalCase(monthIndex) {
  const months = ['—è–Ω–≤–∞—Ä—ë–º', '—Ñ–µ–≤—Ä–∞–ª—ë–º', '–º–∞—Ä—Ç–æ–º', '–∞–ø—Ä–µ–ª–µ–º', '–º–∞–µ–º', '–∏—é–Ω–µ–º', '–∏—é–ª–µ–º', '–∞–≤–≥—É—Å—Ç–æ–º', '—Å–µ–Ω—Ç—è–±—Ä—ë–º', '–æ–∫—Ç—è–±—Ä—ë–º', '–Ω–æ—è–±—Ä—ë–º', '–¥–µ–∫–∞–±—Ä—ë–º'];
  return months[(monthIndex + 12) % 12];
}

module.exports = async() => {

  const stickersIDs = [
    16, 21, 28, 29, 30, 50, 52, 2079, 2770, 2778, 2780, 3003, 4323, 4343, 4346, 4535, 
  ];
  
  let [ currentWeather, forecast, todayHolidays ] = await Promise.all([
    weather.getCurrentWeather(), 
    weather.getForecast(), 
    holidays.getHolidays(),
  ]);
  
  console.log(`Weather: ${ util.inspect(currentWeather) }`);
  console.log(`Forecast: ${ util.inspect(forecast) }`);
  let weatherMessage = getWeatherMessage(currentWeather, forecast);  
  
  let randomID = stickersIDs[Math.floor(Math.random() * stickersIDs.length)];
  console.log(`Sticker sent response: ${ await sender.sendSticker(randomID) }`);
  
  console.log(`Weather message: ${ weatherMessage }`);
  console.log(`Weather message sent response: ${ await sender.sendMessage(weatherMessage) }`);
  
  let holidaysMessage = getHolidaysMessage(todayHolidays);
  console.log(`Holidays: ${ util.inspect(todayHolidays) }`);
  if (holidaysMessage) {
    console.log(`Holidays message sent response: ${ await sender.sendMessage(holidaysMessage) }`);
  }

  let ads = await getAdsMessage();
  console.log(`Ads: ${ ads }`);
  if (ads) {
    console.log(`Ads message sent response: ${ await sender.sendMessage(ads) }`);
  }

  if (firstDayOfMonth()) {
    const statisticsMessage = await getStatisticsMessage();
    console.log(`Statistics: ${ statisticsMessage }`);
    console.log(`Statistics message sent response: ${ await sender.sendMessage(statisticsMessage) }`);
    await statistics.resetStatistics();
  }

};
